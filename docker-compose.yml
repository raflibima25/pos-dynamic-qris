version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: qris-pos-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: qris_pos
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    networks:
      - qris-pos-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: qris-pos-api
    environment:
      - APP_NAME=QRIS POS Backend
      - APP_VERSION=1.0.0
      - LOG_LEVEL=debug
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8080
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=qris_pos
      - DB_SSL_MODE=disable
      - JWT_SECRET=your_jwt_secret_key_change_this_in_production
      - MIDTRANS_SERVER_KEY=your_midtrans_server_key
      - MIDTRANS_CLIENT_KEY=your_midtrans_client_key
      - MIDTRANS_ENVIRONMENT=sandbox
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - qris-pos-network
    volumes:
      - ./backend:/app
    restart: unless-stopped

  # Frontend
  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: qris-pos-web
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080/api/v1
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - qris-pos-network
    restart: unless-stopped

  # Adminer (Database Admin Tool)
  adminer:
    image: adminer:4.8.1
    container_name: qris-pos-adminer
    ports:
      - "8081:8080"
    depends_on:
      - db
    networks:
      - qris-pos-network
    environment:
      ADMINER_DEFAULT_SERVER: db

volumes:
  postgres_data:

networks:
  qris-pos-network:
    driver: bridge